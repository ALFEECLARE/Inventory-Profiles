buildscript {
  repositories {
    mavenCentral()
    jcenter() // for shadow plugin
  }
  dependencies {
    classpath 'net.sf.proguard:proguard-gradle:6.2.2'
  }
}

plugins {
  id 'fabric-loom'
  id 'maven-publish'
  id "org.jetbrains.kotlin.jvm"
  id "com.github.johnrengelman.shadow" version "5.2.0"
}

// repositories {
//   maven {
//     url 'https://masa.dy.fi/maven'
//   }
// }

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.mod_file_name + '-' + project.minecraft_version
version = project.mod_version
group = project.maven_group

minecraft {
}

dependencies {
  //to change the versions see the gradle.properties file
  minecraft "com.mojang:minecraft:${project.minecraft_version}"
  mappings "net.fabricmc:yarn:${project.yarn_mappings}"
  modCompile "net.fabricmc:fabric-loader:${project.loader_version}"
  compileOnly "com.google.code.findbugs:jsr305:3.0.2"

  // Fabric API. This is technically optional, but you probably want it anyway.
  //modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

  // Kotlin fabric
  // modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

  // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
  // You may need to force-disable transitiveness on them.
  modCompile "io.github.prospector:modmenu:" + project.mod_menu_version
}

processResources {
  inputs.property "version", project.version

  from(sourceSets.main.resources.srcDirs) {
    include "fabric.mod.json"
    expand "version": project.version
  }

  from(sourceSets.main.resources.srcDirs) {
    exclude "fabric.mod.json"
  }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
//task sourcesJar(type: Jar, dependsOn: classes) {
//  classifier = "sources"
//  from sourceSets.main.allSource
//}

//jar {
//  from "LICENSE"
//}

remapJar {
  archiveName = "${archivesBaseName}-${version}-remapped-dev.jar"
}

// configure the maven publication
publishing {
  publications {
    mavenJava(MavenPublication) {
      // add all the jars that should be included when publishing to maven
      artifact(remapJar) {
        builtBy remapJar
      }
//      artifact(sourcesJar) {
//        builtBy remapSourcesJar
//      }
    }
  }

  // select the repositories you want to publish to
  repositories {
    // uncomment to publish to the local maven
    // mavenLocal()
  }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ['-Xjvm-default=compatibility']
    // includeRuntime = true
    // noStdlib = false
  }
}

shadowJar {
  dependencies {
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib"))
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib-common"))
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8"))
  }
  relocate 'kotlin', 'io.github.jsnimda.common.embedded.kotlin'
  exclude '**/*.kotlin_metadata'
  exclude '**/*.kotlin_module'
  exclude '**/*.kotlin_builtins'
}

task remapShadowJar(type: net.fabricmc.loom.task.RemapJarTask) {
  input = shadowJar.archivePath
  addNestedDependencies = remapJar.addNestedDependencies
  archiveClassifier = "remapped-all"
}
tasks.remapShadowJar.dependsOn tasks.shadowJar

task proguard(type: proguard.gradle.ProGuardTask) {
  configuration 'proguard.txt'

  injars "build/libs/${archivesBaseName}-${version}-remapped-all.jar"
  outjars "build/libs/${archivesBaseName}-${version}.jar"

  libraryjars "${->files(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) })}"
}

tasks.proguard.dependsOn tasks.remapShadowJar
tasks.build.dependsOn tasks.proguard
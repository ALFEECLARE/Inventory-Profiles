buildscript {
  repositories {
    jcenter() // for shadow plugin
  }
  dependencies {
    classpath 'net.sf.proguard:proguard-gradle:6.2.2'
  }
}

plugins {
  id 'fabric-loom'
  id 'maven-publish'
  id "org.jetbrains.kotlin.jvm"
  id "com.github.johnrengelman.shadow" version "5.2.0"
  id 'antlr'
}

repositories {
  mavenCentral()
  maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
  maven { url 'https://kotlin.bintray.com/kotlinx' }
}

// repositories {
//   maven {
//     url 'https://masa.dy.fi/maven'
//   }
// }

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.mod_file_name + '-' + project.minecraft_version
version = project.mod_version
group = project.maven_group

minecraft {
}

dependencies {
  //to change the versions see the gradle.properties file
  minecraft "com.mojang:minecraft:${project.minecraft_version}"
  mappings "net.fabricmc:yarn:${project.yarn_mappings}"
  modCompile "net.fabricmc:fabric-loader:${project.loader_version}"
  compileOnly "com.google.code.findbugs:jsr305:3.0.2"

  // Fabric API. This is technically optional, but you probably want it anyway.
  //modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

  // Kotlin fabric
  // modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

  // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
  // You may need to force-disable transitiveness on them.
  modCompile "io.github.prospector:modmenu:" + project.mod_menu_version

  implementation "org.jetbrains.kotlin:kotlin-script-runtime"
  antlr "org.antlr:antlr4:4.8"
  implementation "org.antlr:antlr4-runtime:4.8"
}

processResources {
  inputs.property "version", project.version

  from(sourceSets.main.resources.srcDirs) {
    include "fabric.mod.json"
    expand "version": project.version
  }

  from(sourceSets.main.resources.srcDirs) {
    exclude "fabric.mod.json"
  }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
//task sourcesJar(type: Jar, dependsOn: classes) {
//  classifier = "sources"
//  from sourceSets.main.allSource
//}

//jar {
//  from "LICENSE"
//}

remapJar {
  archiveName = "${archivesBaseName}-${version}-remapped-dev.jar"
}

// configure the maven publication
publishing {
  publications {
    mavenJava(MavenPublication) {
      // add all the jars that should be included when publishing to maven
      artifact(remapJar) {
        builtBy remapJar
      }
//      artifact(sourcesJar) {
//        builtBy remapSourcesJar
//      }
    }
  }

  // select the repositories you want to publish to
  repositories {
    // uncomment to publish to the local maven
    // mavenLocal()
  }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ['-Xjvm-default=compatibility', '-Xopt-in=kotlin.ExperimentalStdlibApi']
    // includeRuntime = true
    // noStdlib = false
  }
}

shadowJar {
  dependencies {
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib"))
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib-common"))
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7"))
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8"))
    include(dependency("org.antlr:antlr4-runtime"))
  }
  relocate 'kotlin', 'io.github.jsnimda.common.embedded.kotlin'
  relocate 'org.antlr', 'io.github.jsnimda.common.embedded.org.antlr'
  exclude '**/*.kotlin_metadata'
  exclude '**/*.kotlin_module'
  exclude '**/*.kotlin_builtins'
  exclude '**/*_ws.class' // fixme find a better solution for removing *.ws.kts
  exclude '**/*_ws$*.class'
}

task remapShadowJar(type: net.fabricmc.loom.task.RemapJarTask) {
//  input = shadowJar.archivePath
  input = file("build/libs/${archivesBaseName}-${version}-all-proguard.jar")
  addNestedDependencies = remapJar.addNestedDependencies
//  archiveClassifier = "remapped-all"
}

/*
output jars: (embedding library: kotlin, antlr)
*-dev.jar              | no embedded kotlin, no mapping
*-remapped-dev.jar     | no embedded kotlin, mapped
*-all.jar              | embedded kotlin, no mapping
*-all-proguard.jar     | embedded kotlin, removed unused embedding classes, no mapping
*.jar                  | embedded kotlin, removed unused embedding classes, mapped

*/

//tasks.remapShadowJar.dependsOn tasks.shadowJar

// this line solve 'Could not resolve all files' error for configurations.findByName('runtimeClasspath').getFiles()
// but not needed if by doFirst
//allprojects {
//  repositories {
//    jcenter()
//    mavenCentral()
//  }
//}

task proguard(type: proguard.gradle.ProGuardTask) {
  configuration 'proguard.txt'

  injars "build/libs/${archivesBaseName}-${version}-all.jar"
  outjars "build/libs/${archivesBaseName}-${version}-all-proguard.jar"

  doFirst {
    libraryjars configurations.findByName('runtimeClasspath').getFiles()
  }
}

tasks.proguard.dependsOn tasks.shadowJar
tasks.remapShadowJar.dependsOn tasks.proguard
tasks.build.dependsOn tasks.remapShadowJar

//https://stackoverflow.com/questions/10615966/compiling-3-2-antlr-grammar-with-gradle
task genAntlr(type: JavaExec) {
  description = 'Generates Java sources from Antlr4 grammars.'

  def destinationDir = "src/main/java/io/github/jsnimda/inventoryprofiles/gen"
  def antlrSource = 'src/main/java/io/github/jsnimda/inventoryprofiles/parser/antlr'
  def packageName = "io.github.jsnimda.inventoryprofiles.gen"

  inputs.dir file(antlrSource)
  outputs.dir file(destinationDir)

  def grammars = fileTree(antlrSource).include('**/*.g4')
  def files = grammars.files.collect { file('.').relativePath(it) } // no absolute path in generated files

  main = 'org.antlr.v4.Tool'
  classpath = configurations.antlr
  args = ["-o", destinationDir, "-package", packageName, files].flatten()
}

generateGrammarSource { }
generateGrammarSource.enabled = false
